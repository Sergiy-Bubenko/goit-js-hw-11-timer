{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","conf","currentDate","Date","now","timeLeft","startDate","refs","days","textContent","pad","Math","floor","hours","mins","secs","value","String","padStart","timeId","setInterval","calc","document","querySelector","targetDate","timer1","selector","timeStart"],"mappings":";;;AA2CA,aAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA3CA,QAAA,oBAGA,MAAMA,EACJC,YAAYC,GAaL,EAAA,KAAA,OAAA,KACDC,IAAAA,EAAcC,KAAKC,MAClBC,KAAAA,SAAW,KAAKC,UAAYJ,EAE7B,KAAKG,UAAY,IAEhBE,KAAAA,KAAKC,KAAKC,YAAc,KAAKC,IAAIC,KAAKC,MAAM,KAAKP,SAAY,QAC7DE,KAAAA,KAAKM,MAAMJ,YAAc,KAAKC,IAAIC,KAAKC,MAAO,KAAKP,SAAY,MAAyB,OACxFE,KAAAA,KAAKO,KAAKL,YAAc,KAAKC,IAAIC,KAAKC,MAAO,KAAKP,SAAY,KAAoB,MAClFE,KAAAA,KAAKQ,KAAKN,YAAc,KAAKC,IAAIC,KAAKC,MAAO,KAAKP,SAAY,IAAc,SAG5EW,EAAAA,KAAAA,MAAAA,GACEC,OAAOD,GAAOE,SAAS,EAAG,MAGvB,EAAA,KAAA,YAAA,KACLC,KAAAA,OAASC,YAAY,KAAKC,KAAM,OA7BhCd,KAAAA,KAAO,CACVC,KAAMc,SAASC,cAAc,2BAC7BV,MAAOS,SAASC,cAAc,4BAC9BT,KAAMQ,SAASC,cAAc,2BAC7BR,KAAMO,SAASC,cAAc,4BAG1BjB,KAAAA,UAAYL,EAAKuB,WACjBL,KAAAA,OAAS,KACTd,KAAAA,SAAW,MAyBpB,MAAMoB,EAAS,IAAI1B,EAAe,CAChC2B,SAAU,WACVF,WAAY,IAAIrB,KAAK,iBAEvBsB,EAAOE","file":"src.1ae81cd8.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\r\n\r\n\r\nclass CountdownTimer {\r\n  constructor(conf) {\r\n    this.refs = {\r\n      days: document.querySelector('span[data-value=\"days\"]'),\r\n      hours: document.querySelector('span[data-value=\"hours\"]'),\r\n      mins: document.querySelector('span[data-value=\"mins\"]'),\r\n      secs: document.querySelector('span[data-value=\"secs\"]'),\r\n    }\r\n    \r\n    this.startDate = conf.targetDate;\r\n    this.timeId = null;\r\n    this.timeLeft = null;  \r\n  }\r\n\r\n  calc = () => {\r\n    let currentDate = Date.now();\r\n    this.timeLeft = this.startDate - currentDate;\r\n    \r\n    if (this.timeLeft <= 0) return;\r\n\r\n    this.refs.days.textContent = this.pad(Math.floor(this.timeLeft / (1000 * 60 * 60 * 24)));\r\n    this.refs.hours.textContent = this.pad(Math.floor((this.timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    this.refs.mins.textContent = this.pad(Math.floor((this.timeLeft % (1000 * 60 * 60)) / (1000 * 60)));\r\n    this.refs.secs.textContent = this.pad(Math.floor((this.timeLeft % (1000 * 60)) / 1000));\r\n  }\r\n\r\n  pad = (value) => {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n  \r\n  timeStart = () => {\r\n    this.timeId = setInterval(this.calc, 1000);\r\n  }\r\n};\r\n\r\n\r\nconst timer1 = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('11 17, 2021'),\r\n});\r\ntimer1.timeStart();"]}